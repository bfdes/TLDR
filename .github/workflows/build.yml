name: Build
on: push
env:
  IMAGE_NAME: url-shortener
jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    container: golang
    services:
      cache:
        image: memcached:latest
        ports:
          - 11211:11211
      database:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: url-shortener
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Restore Go modules cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: go-module-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          go-module-
    - name: Run tests
      run: go test -coverprofile=coverage.txt
      env:
        MEMCACHED_HOST: cache
        POSTGRES_HOST: database
    - name: Upload test coverage report
      uses: codecov/codecov-action@v1
  publish:
    name: Publish image
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image to registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
